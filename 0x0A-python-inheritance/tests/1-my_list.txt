    This is a documentation
    for the module: 1-my_list
===================================

This module contains a class that is inherited from list and
provides a method that  print a list in a sorted manner with
out changing the orginal list.

Classes:
    MyList : This is a class that is inherited from list and
    provides a method that  print a list in a sorted manner with
    out changing the orginal list.

Functions:
    No functions.


    # importing files and adding the parrent directory.
    # I added the parrent directory because the module is there.
    
    >>> MyList = __import__('1-my_list').MyList
    
    # Test with completly descending ordered list of integers.
    >>> testListInit = [10, 8, 6, 4, 2, 0]
    >>> testList = MyList()
    >>> for i in testListInit:
    ...     testList.append(i)
    >>> testList.print_sorted()
    [0, 2, 4, 6, 8, 10]

    # Test with ascendingly orders list of integers.
    >>> testListInit = [0, 2, 4, 6, 8, 10]
    >>> testList = MyList()
    >>> for i in testListInit:
    ...     testList.append(i)
    >>> testList.print_sorted()
    [0, 2, 4, 6, 8, 10]

    # Test with randomly ordered list of intgers.
    >>> testListInit = [83, 543, 65, 224, 64, 76, 87]
    >>> testList = MyList()
    >>> for i in testListInit:
    ...     testList.append(i)
    >>> testList.print_sorted()
    [64, 65, 76, 83, 87, 224, 543]

    # Checking for module docstring:
    >>> m = __import__("1-my_list").__doc__
    >>> len(m) > 1
    True

    # Checking for class docstring:
    >>> c = __import__("1-my_list").MyList.__doc__
    >>> len(c) > 1
    True

    # Checking for method docstring:
    >>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
    >>> len(mod) > 1
    True

    # Checking that MyList inherits from list:
    >>> issubclass(MyList, list)
    True

    # Checking for empty list:
    >>> l = MyList()
    >>> l.print_sorted()
    []
    
    # Checking that appendng works:
    >>> l.append(1)
    >>> l.append(2)
    >>> l.append(3)
    >>> l.append(4)
    >>> print(l)
    [1, 2, 3, 4]

    # Checking for list already in correct order:
    >>> l.print_sorted()
    [1, 2, 3, 4]

    # Checking for reversed order list:
    >>> l = MyList()
    >>> l.append(4)
    >>> l.append(3)
    >>> l.append(2)
    >>> l.append(1)
    >>> print(l)
    [4, 3, 2, 1]
    >>> l.print_sorted()
    [1, 2, 3, 4]
    >>> print(l)
    [4, 3, 2, 1]

    # Checking for one negative number:
    >>> l.append(-1)
    >>> l.append(5)
    >>> print(l)
    [4, 3, 2, 1, -1, 5]
    >>> l.print_sorted()
    [-1, 1, 2, 3, 4, 5]
    >>> print(l)
    [4, 3, 2, 1, -1, 5]

    # Checking for all negative numbers:
    >>> l = MyList()
    >>> l.append(-10)
    >>> l.append(-1)
    >>> l.append(-7)
    >>> l.append(-2)
    >>> l.append(-8)
    >>> print(l)
    [-10, -1, -7, -2, -8]
    >>> l.print_sorted()
    [-10, -8, -7, -2, -1]
    >>> print(l)
    [-10, -1, -7, -2, -8]
    
    # Checking for too many arguments:
    >>> l.print_sorted(1) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given
